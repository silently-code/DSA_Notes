=====================================================================
LEETCODE 283: MOVE ZEROES
=====================================================================

Problem Statement:
Given an integer array nums, move all 0's to the end of it while maintaining
the relative order of the non-zero elements.

You must do this dIN-PLACE without making a copy of the array.

---------------------------------------------------------------------
APPROACH: TWO-POINTER SWAP TECHNIQUE
---------------------------------------------------------------------

- Use two pointers i and j.
- j scans through the array.
- i tracks the position to place the next non-zero element.
- Whenever nums[j] != 0, swap nums[i] and nums[j], then increment i.

Time Complexity: O(n)
Space Complexity: O(1)

=====================================================================
JAVA
=====================================================================

class Solution {
    public void moveZeroes(int[] nums) {
        int i = 0;
        for (int j = 0; j < nums.length; j++) {
            if (nums[j] != 0) {
                int temp = nums[j];
                nums[j] = nums[i];
                nums[i] = temp;
                i++;
            }
        }
    }
}

=====================================================================
C
=====================================================================

void moveZeroes(int* nums, int numsSize) {
    int i = 0;
    for (int j = 0; j < numsSize; j++) {
        if (nums[j] != 0) {
            int temp = nums[j];
            nums[j] = nums[i];
            nums[i] = temp;
            i++;
        }
    }
}

=====================================================================
C++
=====================================================================

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int i = 0;
        for (int j = 0; j < nums.size(); j++) {
            if (nums[j] != 0) {
                int temp = nums[j];
                nums[j] = nums[i];
                nums[i] = temp;
                i++;
            }
        }
    }
};

=====================================================================
PYTHON
=====================================================================

class Solution:
    def moveZeroes(self, nums):
        i = 0
        for j in range(len(nums)):
            if nums[j] != 0:
                nums[i], nums[j] = nums[j], nums[i]
                i += 1

=====================================================================
SUMMARY
=====================================================================

All implementations use the two-pointer swapping approach:

- Time Complexity: O(n) — single pass through the array.
- Space Complexity: O(1) — in-place swapping with no extra space.

=====================================================================
