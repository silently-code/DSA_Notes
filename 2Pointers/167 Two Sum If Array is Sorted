âœ… LeetCode 167: Two Sum II â€“ Input Array Is Sorted  
ðŸ§  Approach: Two Pointers  

ðŸ”¸ Java

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int chote = 0;
        int bade = numbers.length - 1;

        while (chote < bade) {
            int result = numbers[chote] + numbers[bade];
            if (result == target) {
                return new int[] { chote + 1, bade + 1 };
            } else if (result > target) {
                bade--;
            } else {
                chote++;
            }
        }

        return new int[] { -1, -1 };
    }
}

ðŸ”¸ C
int* twoSum(int* numbers, int numbersSize, int target, int* returnSize){
    int chote = 0;
    int bade = numbersSize - 1;
    int* result = (int*)malloc(2 * sizeof(int));

    while (chote < bade) {
        int sum = numbers[chote] + numbers[bade];
        if (sum == target) {
            result[0] = chote + 1;
            result[1] = bade + 1;
            *returnSize = 2;
            return result;
        } else if (sum > target) {
            bade--;
        } else {
            chote++;
        }
    }

    result[0] = -1;
    result[1] = -1;
    *returnSize = 2;
    return result;
}

ðŸ”¸ C++

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int chote = 0;
        int bade = numbers.size() - 1;

        while (chote < bade) {
            int sum = numbers[chote] + numbers[bade];
            if (sum == target) {
                return { chote + 1, bade + 1 };
            } else if (sum > target) {
                bade--;
            } else {
                chote++;
            }
        }

        return { -1, -1 };
    }
};

ðŸ”¸ Python

class Solution:
    def twoSum(self, numbers, target):
        chote = 0
        bade = len(numbers) - 1

        while chote < bade:
            result = numbers[chote] + numbers[bade]
            if result == target:
                return [chote + 1, bade + 1]
            elif result > target:
                bade -= 1
            else:
                chote += 1

        return [-1, -1]
